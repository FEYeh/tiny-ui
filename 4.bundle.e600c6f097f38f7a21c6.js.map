{"version":3,"sources":["webpack:///./components/alert/demo/basic.md","webpack:///./components/alert/demo/closable.md","webpack:///./components/alert/demo/close-btn.md","webpack:///./components/alert/demo/icon.md","webpack:///./components/alert/demo/title.md","webpack:///./components/alert/demo/type.md","webpack:///./components/alert/index.md"],"names":["layoutProps","MDXLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"4.bundle.e600c6f097f38f7a21c6.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <demo>\n      <h3>{`Basic`}</h3>\n      <p>{`The simplest usage for short messages.`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-jsx\",\n          \"metastring\": \"live\",\n          \"live\": true\n        }}>{`<Alert>Info alert</Alert>;\n`}</code></pre>\n    </demo>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <demo>\n      <h3>{`Closable`}</h3>\n      <p>{`Display a close button to allow to close the alert. Also, it is a smooth unmount when the alert is closed.`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-jsx\",\n          \"metastring\": \"live\",\n          \"live\": true\n        }}>{`<>\n  <Alert closable>Info alert</Alert>\n  <Alert closable type=\"success\">Success alert</Alert>\n  <Alert closable type=\"warning\">Warning alert</Alert>\n  <Alert closable type=\"error\">Error alert</Alert>\n</>\n`}</code></pre>\n    </demo>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <demo>\n      <h3>{`Customized Close Text`}</h3>\n      <p>{`Replace the default icon with customized text.`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-jsx\",\n          \"metastring\": \"live\",\n          \"live\": true\n        }}>{`<Alert closeText=\"close now\">Info alert</Alert>;\n`}</code></pre>\n    </demo>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <demo>\n      <h3>{`With icon`}</h3>\n      <p>{`A relevant icon will make information clearer and more friendly. Use `}<inlineCode parentName=\"p\">{`iconSize`}</inlineCode>{` to set default icon size. You can also customise an icon by passing an element.`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-jsx\",\n          \"metastring\": \"live\",\n          \"live\": true\n        }}>{`<>\n  <Alert icon>Info alert</Alert>\n  <Alert icon type=\"success\">Success alert</Alert>\n  <Alert icon type=\"warning\">Warning alert</Alert>\n  <Alert icon type=\"error\">Error alert</Alert>\n    \n  <Alert icon iconSize={20} title=\"INFO\">Info alert</Alert>\n  <Alert icon iconSize={20} type=\"success\" title=\"SUCCESS\">Success alert</Alert>\n  <Alert icon iconSize={20} type=\"warning\" title=\"WARNING\">Warning alert</Alert>\n  <Alert icon iconSize={20} type=\"error\" title=\"ERROR\">Error alert</Alert>\n</>\n`}</code></pre>\n    </demo>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <demo>\n      <h3>{`Title`}</h3>\n      <p>{`Additional title for alert message.`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-jsx\",\n          \"metastring\": \"live\",\n          \"live\": true\n        }}>{`<Alert title=\"Well done!\" type=\"success\">\n  Aww yeah, you successfully read this important alert message. This example text is going to run a bit longer so that you can see how spacing within an alert works with this kind of content.\n</Alert>\n`}</code></pre>\n    </demo>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <demo>\n      <h3>{`More types`}</h3>\n      <p>{`There are 4 types of Alert: `}<inlineCode parentName=\"p\">{`success`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`info`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`warning`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`error`}</inlineCode>{`. The default type is `}<strong parentName=\"p\"><inlineCode parentName=\"strong\">{`info`}</inlineCode></strong>{`.`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-jsx\",\n          \"metastring\": \"live\",\n          \"live\": true\n        }}>{`<>\n  <Alert>Info alert</Alert>\n  <Alert type=\"success\">Success alert</Alert>\n  <Alert type=\"warning\">Warning alert</Alert>\n  <Alert type=\"error\">Error alert</Alert>\n</>\n`}</code></pre>\n    </demo>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport Basic from './demo/basic.md'\nimport Closable from './demo/closable.md'\nimport CloseButton from './demo/close-btn.md'\nimport Icon from './demo/icon.md'\nimport Title from './demo/title.md'\nimport Type from './demo/type.md'\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1>{`Alert`}</h1>\n    <p>{`Alert component for feedback.`}</p>\n    <h2>{`Scenario`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`When you need to show alert messages to users.`}</li>\n      <li parentName=\"ul\">{`When you need a persistent static container which is closable by user actions.`}</li>\n    </ul>\n    <h2>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import { Alert } from 'tiny-ui';\n`}</code></pre>\n    <h2>{`Examples`}</h2>\n    <layout>\n  <column>\n    <Basic mdxType=\"Basic\" />\n    <Closable mdxType=\"Closable\" />\n    <Icon mdxType=\"Icon\" />\n  </column>\n  <column>\n    <Type mdxType=\"Type\" />\n    <Title mdxType=\"Title\" />\n    <CloseButton mdxType=\"CloseButton\" />\n  </column>\n    </layout>\n    <h2>{`API`}</h2>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}