{"version":3,"sources":["webpack:///./components/progress/demo/active.md","webpack:///./components/progress/demo/custom-text.md","webpack:///./components/progress/demo/dynamic.md","webpack:///./components/progress/demo/internal-text.md","webpack:///./components/progress/demo/linear-gradient.md","webpack:///./components/progress/demo/progress-bar.md","webpack:///./components/progress/demo/progress-circle.md","webpack:///./components/progress/demo/reverse.md","webpack:///./components/progress/demo/square-linecaps.md","webpack:///./components/progress/index.md"],"names":["layoutProps","MDXLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"24.bundle.e600c6f097f38f7a21c6.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <demo>\n      <h3>{`Active Background Style`}</h3>\n      <p>{`Set `}<inlineCode parentName=\"p\">{`backgroundType`}</inlineCode>{` to display different bar backgrounds.`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-jsx\",\n          \"metastring\": \"live\",\n          \"live\": true\n        }}>{`() => {\n  const { Bar } = Progress;\n  \n  return (\n    <div>\n      <Bar percent={50} backgroundType=\"impulse\"/>\n      <Bar percent={50} backgroundType=\"striped\"/>\n    </div>\n  );\n}\n`}</code></pre>\n    </demo>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <demo>\n      <h3>{`Custom text format`}</h3>\n      <p>{`Set a custom text by setting the `}<inlineCode parentName=\"p\">{`format`}</inlineCode>{` prop.`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-jsx\",\n          \"metastring\": \"live\",\n          \"live\": true\n        }}>{`() => {\n  const { Bar, Circle } = Progress;\n  const { Group } = Button;\n  \n  let label = '';\n  \n  const _barText = (val) => {\n  \n    if (val < 100)\n      label = \\`\\${val} Days\\`;\n    else \n      label = 'Done';\n      \n    return (\n      <span style={{ margin: '0 5px' }}>{label}</span>\n    );\n  };\n  \n  const Wrapper = () => {\n    const [percent, setPercent] = React.useState(90);\n  \n    return (\n      <div>\n        <Group style={{ marginBottom: 20 }}>\n          <Button onClick={() => (percent > 0) && setPercent(percent - 10)}>-</Button>\n          <Button onClick={() => (percent < 100) && setPercent(percent + 10)}>+</Button>\n        </Group>\n        \n        <Bar percent={percent} format={_barText} />\n        <Circle percent={percent} format={_barText} />\n      </div>\n    );\n  };\n\n  return (\n    <Wrapper />\n  );  \n}\n`}</code></pre>\n    </demo>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <demo>\n      <h3>{`Dynamic progress`}</h3>\n      <p>{`Control the value.`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-jsx\",\n          \"metastring\": \"live\",\n          \"live\": true\n        }}>{`() => {\n  const { Bar, Circle } = Progress;\n  const { Group } = Button;\n  \n  const Wrapper = () => {\n    const [percent, setPercent] = React.useState(0);\n  \n    return (\n      <div>\n        <Group style={{ marginBottom: 20 }}>\n          <Button onClick={() => (percent > 0) && setPercent(percent - 10)}>-</Button>\n          <Button onClick={() => (percent < 100) && setPercent(percent + 10)}>+</Button>\n        </Group>\n        \n        <Bar percent={percent} />\n        <Circle percent={percent} />\n      </div>\n    );\n  };\n  \n  return (\n    <Wrapper />\n  );\n}\n`}</code></pre>\n    </demo>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <demo>\n      <h3>{`Internal Text`}</h3>\n      <p>{`Set `}<inlineCode parentName=\"p\">{`innerText`}</inlineCode>{` to display the text inside the bar.`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-jsx\",\n          \"metastring\": \"live\",\n          \"live\": true\n        }}>{`() => {\n  const { Bar } = Progress;\n  \n  return (\n    <div>\n      <Bar percent={0} innerText strokeWidth={15} style={{marginBottom: 10}}/>\n      <Bar percent={30} strokeColor=\"yellow\" innerText strokeWidth={15} style={{marginBottom: 10}}/>\n      <Bar percent={50} strokeColor=\"green\" innerText strokeWidth={15} style={{marginBottom: 10}}/>\n      <Bar percent={70} strokeColor=\"red\" innerText strokeWidth={15} style={{marginBottom: 10}}/>\n      <Bar percent={100} strokeColor=\"blue\" innerText strokeWidth={15} style={{marginBottom: 10}}/>\n    </div>\n  );\n}\n`}</code></pre>\n    </demo>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <demo>\n      <h3>{`Custom linear gradient`}</h3>\n      <p>{`A package of `}<inlineCode parentName=\"p\">{`linear-gradient`}</inlineCode>{`. Pass a color array to set the `}<inlineCode parentName=\"p\">{`strokeColor`}</inlineCode>{`.`}</p>\n      <blockquote>\n        <p parentName=\"blockquote\">{`More linear gradient color presets, please visit `}<a parentName=\"p\" {...{\n            \"href\": \"https://wangdicoder.github.io/awesome-gradient/\"\n          }}>{`Awesome Gradient`}</a>{`.`}</p>\n      </blockquote>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-jsx\",\n          \"metastring\": \"live\",\n          \"live\": true\n        }}>{`() => {\n  const { Bar } = Progress;\n  \n  return (\n    <div>\n      <Bar percent={90} strokeColor={['#108ee9', '#87d068']} backgroundType=\"impulse\"/>\n      <Bar percent={90} strokeColor={['#FDBE2F', '#E64778', '#8927EA']}/>\n    </div>\n  );\n}\n`}</code></pre>\n    </demo>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <demo>\n      <h3>{`Progress bar`}</h3>\n      <p>{`A standard progress bar.`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-jsx\",\n          \"metastring\": \"live\",\n          \"live\": true\n        }}>{`() => {\n  const { Bar } = Progress;\n  \n  return (\n    <div>\n      <Bar percent={10} />\n      <Bar percent={30} strokeColor=\"yellow\"/>\n      <Bar percent={50} strokeColor=\"green\"/>\n      <Bar percent={70} strokeColor=\"red\"/>\n      <Bar percent={100} strokeColor=\"blue\"/>\n      <Bar percent={100} strokeColor=\"blue\" showInfo={false} style={{ marginTop: 5 }}/>\n    </div>\n  );\n}\n`}</code></pre>\n    </demo>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <demo>\n      <h3>{`Progress circular`}</h3>\n      <p>{`A circular progress.`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-jsx\",\n          \"metastring\": \"live\",\n          \"live\": true\n        }}>{`() => {\n  const { Circle } = Progress;\n  \n  const style = {\n      marginRight: '10px',\n  };\n  \n  return (\n    <div>\n      <Circle percent={10} style={style}/>\n      <Circle percent={30} strokeColor=\"yellow\" style={style}/>\n      <Circle percent={50} strokeColor=\"red\" style={style}/>\n      <Circle percent={70} strokeColor=\"blue\" style={style}/>\n      <Circle percent={100} strokeColor=\"blue\" style={style}/>\n      <Circle percent={100} strokeColor=\"green\"/>\n    </div>\n  );\n}\n`}</code></pre>\n    </demo>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <demo>\n      <h3>{`Reverse direction`}</h3>\n      <p>{`Set `}<inlineCode parentName=\"p\">{`reverse`}</inlineCode>{` to control the direction.`}</p>\n      <blockquote>\n        <p parentName=\"blockquote\">{`This is only for `}<strong parentName=\"p\">{`Circle`}</strong>{` progress.`}</p>\n      </blockquote>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-jsx\",\n          \"metastring\": \"live\",\n          \"live\": true\n        }}>{`() => {\n  const { Bar, Circle } = Progress;\n  const { Group } = Button;\n  \n  const Wrapper = () => {\n    const [percent, setPercent] = React.useState(0);\n  \n    return (\n      <div>\n        <Group style={{ marginBottom: 20 }}>\n          <Button onClick={() => (percent > 0) && setPercent(percent - 10)}>-</Button>\n          <Button onClick={() => (percent < 100) && setPercent(percent + 10)}>+</Button>\n        </Group>\n        \n        <br/>\n        \n        <Circle percent={percent} reverse/>\n        <Circle percent={percent} style={{ marginLeft: 10 }}/>\n      </div>\n    );\n  };\n  \n  return (\n    <Wrapper />\n  );\n}\n`}</code></pre>\n    </demo>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <demo>\n      <h3>{`Square linecaps`}</h3>\n      <p>{`By setting `}<inlineCode parentName=\"p\">{`strokeLinecap=\"square\"`}</inlineCode>{`, you can change the linecaps from round to square.`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-jsx\",\n          \"metastring\": \"live\",\n          \"live\": true\n        }}>{`() => {\n  const { Bar, Circle } = Progress;\n  \n  return (\n    <div>\n      <Bar percent={80} strokeLinecap=\"square\"/>\n      <Circle percent={80} strokeLinecap=\"square\"/>\n    </div>\n  );\n}\n`}</code></pre>\n    </demo>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport Active from './demo/active.md'\nimport CustomText from './demo/custom-text.md'\nimport Dynamic from './demo/dynamic.md'\nimport InternalText from './demo/internal-text.md'\nimport LinearGradient from './demo/linear-gradient.md'\nimport ProgressBar from './demo/progress-bar.md'\nimport ProgressCircle from './demo/progress-circle.md'\nimport Reverse from './demo/reverse.md'\nimport SquareLinecaps from './demo/square-linecaps.md'\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1>{`Progress`}</h1>\n    <p>{`Display the current progress of an operation flow.`}</p>\n    <h2>{`Scenario`}</h2>\n    <p>{`If it will take a long time to complete an operation, you can use Progress to show the current progress and status.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`When an operation will interrupt the current interface, or it needs to run in the background for more than 2 seconds.`}</li>\n      <li parentName=\"ul\">{`When you need to display the completion percentage of an operation.`}</li>\n    </ul>\n    <h2>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { Progress } from 'tiny-ui';\n\nconst { Bar, Circle } = Progress;\n`}</code></pre>\n    <h2>{`Examples`}</h2>\n    <layout>\n  <column>\n    <ProgressBar mdxType=\"ProgressBar\" />\n    <ProgressCircle mdxType=\"ProgressCircle\" />\n    <InternalText mdxType=\"InternalText\" />\n    <Active mdxType=\"Active\" />\n    <LinearGradient mdxType=\"LinearGradient\" />\n  </column>\n  <column>\n    <Dynamic mdxType=\"Dynamic\" />\n    <CustomText mdxType=\"CustomText\" />\n    <Reverse mdxType=\"Reverse\" />\n    <SquareLinecaps mdxType=\"SquareLinecaps\" />\n  </column>\n    </layout>\n    <h2>{`API`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Default`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`size`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`selection size`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`enum: `}<inlineCode parentName=\"td\">{`sm`}</inlineCode>{` `}<inlineCode parentName=\"td\">{`md`}</inlineCode>{` `}<inlineCode parentName=\"td\">{`lg`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`md`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`disabled`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`disable to select`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`style`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`style object of container\tobject`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`className`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`className of container`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}