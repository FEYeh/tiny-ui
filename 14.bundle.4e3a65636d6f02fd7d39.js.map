{"version":3,"sources":["webpack:///./components/drawer/demo/basic.md","webpack:///./components/drawer/demo/placement.md","webpack:///./components/drawer/demo/multi-level.md","webpack:///./components/drawer/index.md"],"names":["layoutProps","MDXLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"srBAOA,IAKMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,oBACD,OAAO,YAACH,EAAD,KAAeD,EAAiBI,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,wBACE,+BACA,sCACA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,eACb,WAAc,OACd,MAAQ,IAHP,6e,mkBA8BXJ,EAAWK,gBAAiB,EC/C5B,IAKMP,EAAc,GAGdC,EAAY,UACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,oBACD,OAAO,YAAC,EAAD,KAAeJ,EAAiBI,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,wBACE,mCACA,2EACA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,eACb,WAAc,OACd,MAAQ,IAHP,w+B,mkBAiDXJ,EAAWK,gBAAiB,EClE5B,IAKMP,EAAc,GAGdC,EAAY,UACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,oBACD,OAAO,YAAC,EAAD,KAAeJ,EAAiBI,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,wBACE,4CACA,qGACA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,eACb,WAAc,OACd,MAAQ,IAHP,84C,mkBA4DXJ,EAAWK,gBAAiB,E,wCC3E5B,IAKMP,EAAc,GAGdC,EAAY,UACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,oBACD,OAAO,YAAC,EAAD,KAAeJ,EAAiBI,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,gCACA,6EACA,kCACA,gTACA,sBACE,kBAAIC,WAAW,MAAf,sDACA,kBAAIA,WAAW,MAAf,qKACA,kBAAIA,WAAW,MAAf,qDAEF,+BACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,wCAIL,kCACA,0BACF,0BACE,YAAC,EAAD,CAAOD,QAAQ,UACf,YAAC,EAAD,CAAOA,QAAQ,WAEjB,0BACE,YAAC,EAAD,CAAWA,QAAQ,gBAGnB,6BACA,yBACE,qBAAOC,WAAW,SAChB,kBAAIA,WAAW,SACb,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,YAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,eAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,QAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,aAKJ,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,aAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,+BAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,SAEa,0BAAYA,WAAW,MAAvB,OAFb,YAE4E,0BAAYA,WAAW,MAAvB,UAF5E,YAE8I,0BAAYA,WAAW,MAAvB,QAF9I,YAE8M,0BAAYA,WAAW,MAAvB,UAC9M,oBAAIA,WAAW,MAAS,CACtB,MAAS,OACR,0BAAYA,WAAW,MAAvB,WAEL,kBAAIA,WAAW,SACb,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,QAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,iCAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,yBAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,QAIF,kBAAIA,WAAW,SACb,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,WAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,+CAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,WAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,MAIF,kBAAIA,WAAW,SACb,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,UAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,iBAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,aAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,MAIF,kBAAIA,WAAW,SACb,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,UAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,iBAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,aAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,MAIF,kBAAIA,WAAW,SACb,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,YAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,0BAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,WAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OACR,0BAAYA,WAAW,MAAvB,UAEL,kBAAIA,WAAW,SACb,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,kBAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,wDAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,WAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OACR,0BAAYA,WAAW,MAAvB,UAEL,kBAAIA,WAAW,SACb,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,SAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,qCAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,iBAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,MAIF,kBAAIA,WAAW,SACb,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,aAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,0BAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,UAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,SAUVJ,EAAWK,gBAAiB","file":"14.bundle.4e3a65636d6f02fd7d39.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <demo>\n      <h3>{`Basic`}</h3>\n      <p>{`Basic drawer.`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-jsx\",\n          \"metastring\": \"live\",\n          \"live\": true\n        }}>{`() => {\n  const [visible, setVisible] = React.useState(false);\n\n  return (\n    <div>\n      <Button color=\"primary\" onClick={() => setVisible(true)}>\n        Open\n      </Button>\n      <Drawer\n        header=\"Basic Drawer\"\n        placement=\"right\"\n        onClose={() => setVisible(false)}\n        visible={visible}>\n          <div>Some contents...</div>\n          <div>Some contents...</div>\n          <div>Some contents...</div>\n      </Drawer>\n    </div>\n  );\n};\n`}</code></pre>\n    </demo>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <demo>\n      <h3>{`Placement`}</h3>\n      <p>{`The Drawer can appear from any edge of the screen.`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-jsx\",\n          \"metastring\": \"live\",\n          \"live\": true\n        }}>{`() => {\nconst { Group } = Radio;\n  \n  const Wrapper = () => {\n    const [visible, setVisible] = React.useState(false);\n    const [placement, setPlacement] = React.useState('left');\n    \n    return(\n      <>\n        <Group value={placement} onChange={(val) => setPlacement(val)}>\n          <Radio value=\"top\">Top</Radio>\n          <Radio value=\"bottom\">Bottom</Radio>\n          <Radio value=\"left\">Left</Radio>\n          <Radio value=\"right\">Right</Radio>\n        </Group>\n        <br/>\n        <br/>\n\n        <Button color=\"primary\" onClick={() => setVisible(true)}>\n          Open\n        </Button>\n\n        <Drawer\n          header=\"Basic Drawer\"\n          placement={placement}\n          onClose={() => setVisible(false)}\n          visible={visible}>\n            <div>Some contents...</div>\n            <div>Some contents...</div>\n            <div>Some contents...</div>\n        </Drawer>\n      </>\n    );\n  };\n  \n  return (\n    <Wrapper />\n  );\n};\n`}</code></pre>\n    </demo>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <demo>\n      <h3>{`Multi-level drawer`}</h3>\n      <p>{`Open a new drawer on top of an existing drawer to handle multi branch tasks.`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-jsx\",\n          \"metastring\": \"live\",\n          \"live\": true\n        }}>{`() => {\n  const [visible, setVisible] = React.useState(false);\n  const [childVisible, setChildVisible] = React.useState(false);\n\n  return (\n    <>\n      <Button color=\"primary\" onClick={() => setVisible(true)}>\n        Open drawer\n      </Button>\n      <Drawer\n        header=\"Multi-level drawer\"\n        size={520}\n        closable={false}\n        onClose={() => setVisible(false)}\n        visible={visible}>\n        <Button color=\"primary\" onClick={() => setChildVisible(true)}>\n          Two-level drawer\n        </Button>\n        <Drawer\n          header=\"Two-level Drawer\"\n          size={320}\n          closable={false}\n          onClose={() => setChildVisible(false)}\n          visible={childVisible}>\n          This is two-level drawer\n        </Drawer>\n        <div\n          style={{\n            position: 'absolute',\n            bottom: 0,\n            width: '100%',\n            borderTop: '1px solid #e8e8e8',\n            padding: '10px 16px',\n            textAlign: 'right',\n            left: 0,\n            background: '#fff',\n            borderRadius: '0 0 4px 4px',\n          }}>\n          <Button\n            onClick={() => setVisible(false)}>\n            Cancel\n          </Button>\n          <Button onClick={() => setVisible(false)} color=\"primary\">\n            Submit\n          </Button>\n        </div>\n      </Drawer>\n    </>\n  );\n};\n`}</code></pre>\n    </demo>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport Basic from './demo/basic.md'\nimport Placement from './demo/placement.md'\nimport Level from './demo/multi-level.md'\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1>{`Drawer`}</h1>\n    <p>{`A panel which slides in from the edge of the screen.`}</p>\n    <h2>{`Scenario`}</h2>\n    <p>{`A Drawer is a panel that is typically overlaid on top of a page and slides in from the side. It contains a set of information or actions. Since the user can interact with the Drawer without leaving the current page, tasks can be achieved more efficiently within the same context.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Use a Form to create or edit a set of information.`}</li>\n      <li parentName=\"ul\">{`Processing sub tasks. When sub tasks are too heavy for a Popover and we still want to keep the subtasks in the context of the main task, Drawer comes very handy.`}</li>\n      <li parentName=\"ul\">{`When the same Form is needed in multiple places.`}</li>\n    </ul>\n    <h2>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import { Drawer } from 'tiny-ui';\n`}</code></pre>\n    <h2>{`Examples`}</h2>\n    <layout>\n  <column>\n    <Basic mdxType=\"Basic\" />\n    <Level mdxType=\"Level\" />\n  </column>\n  <column>\n    <Placement mdxType=\"Placement\" />\n  </column>\n    </layout>\n    <h2>{`API`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Default`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`placement`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The placement of the Drawer`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`enum: `}<inlineCode parentName=\"td\">{`top`}</inlineCode>{` `}{`|`}{` `}<inlineCode parentName=\"td\">{`bottom`}</inlineCode>{` `}{`|`}{` `}<inlineCode parentName=\"td\">{`left`}</inlineCode>{` `}{`|`}{` `}<inlineCode parentName=\"td\">{`right`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`right`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`size`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Drawer dialog width or height`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number `}{`|`}{` string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`256`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`visible`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Whether the Drawer dialog is visible or not`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`header`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Drawer header`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ReactNode`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`footer`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Drawer footer`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ReactNode`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`closable`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Display a close button`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`true`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`unmountOnClose`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Whether unmount child components when closing drawer`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`true`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`style`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`style object of container\tobject`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`CSSProperties`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`className`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`className of container`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}