{"version":3,"sources":["../../core/component/index.ts","../../core/component/button/index.tsx","../../core/component/button/button-group.tsx","App.js","serviceWorker.js","index.js"],"names":["button_1","__webpack_require__","exports","Button","default","React","classnames_1","io_1","button_group_1","props","color","size","block","icon","link","loading","dash","disabled","outline","round","ripple","children","className","prefixCls","others","tslib_1","__rest","cls","_a","createElement","__assign","type","IoIosSync","renderIcon","defaultProps","Group","ButtonGroup","Children","map","child","cloneElement","App","react_default","a","component","onClick","console","log","index_esm","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0cf3c204.chunk.js","sourcesContent":["export { default as Button } from './button';","import * as React from 'react';\nimport './style/index.css';\nimport classNames from 'classnames';\nimport {IoIosSync} from 'react-icons/io';\nimport Group from './button-group';\n\nexport type ButtonColors = 'default' | 'primary' | 'blue' | 'red' | 'yellow' | 'green' | 'pink';\nexport type ButtonSizes = 'xs' | 'sm' | 'md' | 'lg';\n\nexport type ButtonProps = {\n    color?: ButtonColors,\n    loading?: boolean,\n    disabled?: boolean,\n    block?: boolean,\n    outline?: boolean,\n    size?: ButtonSizes,\n    round?: boolean,\n    ripple?: boolean,\n    dash?: boolean,\n    icon?: React.ReactNode,\n    link?: boolean,\n    className?: string,\n    children?: React.ReactNode;\n    prefixCls?: string,\n\n    // Allow to pass html attribute\n    [others: string]: any,\n};\n\nconst renderIcon = (icon: React.ReactNode, loading: boolean = false) => {\n    if (loading) {\n        return <IoIosSync className=\"ty-btn__loader\"/>;\n    } else {\n        return icon;\n    }\n};\n\nconst Button = (props: ButtonProps) => {\n    const {\n        color, size, block, icon, link, loading, dash, disabled, outline,\n        round, ripple, children, className, prefixCls, ...others\n    } = props;\n    const cls = classNames(\n        className,\n        prefixCls,\n        link ? [`${prefixCls}_${color}_link`] :\n            (outline ? [`${prefixCls}_${color}_outline`] : [`${prefixCls}_${color}`]),\n        size && `${prefixCls}_${size}`,\n        {\n            [`${prefixCls}_block`]: block,\n            [`${prefixCls}_round`]: round,\n            [`${prefixCls}_ripple`]: ripple,\n            [`${prefixCls}_dash`]: outline && dash,  // Only available outline style\n            [`ty-btn_${color}_disabled`]: disabled || loading,\n        },\n    );\n    return (\n        <button\n            className={cls}\n            disabled={disabled || loading}\n            type=\"button\"\n            {...others}>\n            {renderIcon(icon, loading)}\n            {children}\n        </button>\n    );\n};\n\nButton.defaultProps = {\n    prefixCls: 'ty-btn',\n    size: 'md',\n    color: 'default',\n};\n\nButton.Group = Group;\n\nexport default Button;","import * as React from 'react';\nimport {ButtonProps, ButtonSizes, ButtonColors} from '.';\nimport classNames from 'classnames';\n\ntype ButtonGroupProps = {\n    children: React.ReactNode,\n    size?: ButtonSizes,\n    ripple?: boolean,\n    color?: ButtonColors,\n    round?: boolean,\n    className?: string,\n    prefixCls?: string,\n};\n\nconst ButtonGroup = (props: ButtonGroupProps) => {\n    const {size, ripple, color, round, className, prefixCls, children} = props;\n    const cls = classNames(className, prefixCls, {\n        [`${prefixCls}_round`] : round,\n    });\n    return (\n        <div className={cls}>\n            {React.Children.map(children, (child: React.ReactElement<ButtonProps>) => {\n                return React.cloneElement(child, {...child.props, size, ripple, color});\n            })}\n        </div>\n    );\n};\n\nButtonGroup.defaultProps = {\n    prefixCls: 'ty-btn-group',\n    size: 'md',\n};\n\nexport default ButtonGroup;","import React, {Component} from 'react';\nimport './App.css';\nimport {IoIosAdd} from 'react-icons/io';\nimport {Button} from '../../core';\n\nconst {Group} = Button;\n\nclass App extends Component {\n  render() {\n    return (\n        <div className=\"App\">\n          <Button>Default</Button>\n          <Button outline color=\"primary\">Default</Button>\n          <Button link size=\"xs\" color=\"pink\" round>Primary Button</Button>\n          <Button color=\"blue\" round>Info Button</Button>\n          <Button color=\"green\">Success Button</Button>\n          <Button disabled ripple size=\"sm\" color=\"pink\">Primary Button</Button>\n          <Button ripple size=\"sm\" color=\"yellow\" round link dash>Primary Button</Button>\n          <Button ripple size=\"sm\" color=\"yellow\" round outline dash>Primary Button</Button>\n          <Button ripple color=\"pink\" dash onClick={() => console.log('dasdasd')}>Primary Button</Button>\n          <Button size=\"lg\" color=\"pink\" block round>Primary Button</Button>\n          <Button color=\"pink\" round outline icon={<IoIosAdd/>}>Primary Button</Button>\n          <Button size=\"lg\" color=\"pink\" loading outline disabled>Primary Button</Button>\n\n          <Group ripple>\n              <Button>Left</Button>\n              <Button dash>Middle</Button>\n              <Button>Right</Button>\n          </Group>\n          <Group ripple color=\"primary\" round>\n            <Button>Left</Button>\n            <Button>Middle</Button>\n            <Button>Right</Button>\n          </Group>\n          <Group ripple color=\"blue\" round>\n              <Button>Left</Button>\n              <Button>Middle</Button>\n              <Button>Right</Button>\n          </Group>\n          <Group ripple color=\"green\">\n              <Button disabled>Left</Button>\n              <Button>Right</Button>\n          </Group>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}