{"version":3,"sources":["webpack:///./components/tag/demo/basic.md","webpack:///./components/tag/demo/checkable.md","webpack:///./components/tag/demo/color.md","webpack:///./components/tag/demo/controlled.md","webpack:///./components/tag/demo/dynamic.md","webpack:///./components/tag/index.md"],"names":["layoutProps","MDXLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"srBAOA,IAKMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,oBACD,OAAO,YAACH,EAAD,KAAeD,EAAiBI,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,wBACE,+BACA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,eACb,WAAc,OACd,MAAQ,IAHP,+d,mkBAmCXJ,EAAWK,gBAAiB,ECnD5B,IAKMP,EAAc,GAGdC,EAAY,UACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,oBACD,OAAO,YAAC,EAAD,KAAeJ,EAAiBI,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,wBACE,mCACA,qBAAG,0BAAYC,WAAW,KAAvB,gBAAH,4DACA,8BACE,iBAAGA,WAAW,cAAd,0DAEF,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,eACb,WAAc,OACd,MAAQ,IAHP,6Z,mkBAyBXJ,EAAWK,gBAAiB,EC7C5B,IAKMP,EAAc,GAGdC,EAAY,UACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,oBACD,OAAO,YAAC,EAAD,KAAeJ,EAAiBI,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,wBACE,sCACA,+JACA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,eACb,WAAc,OACd,MAAQ,IAHP,2sB,mkBAkCXJ,EAAWK,gBAAiB,ECnD5B,IAKMP,EAAc,GAGdC,EAAY,UACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,oBACD,OAAO,YAAC,EAAD,KAAeJ,EAAiBI,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,wBACE,oCACA,qCAAoB,0BAAYC,WAAW,KAAvB,WAApB,kDACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,eACb,WAAc,OACd,MAAQ,IAHP,we,mkBAiCXJ,EAAWK,gBAAiB,EClD5B,IAKMP,EAAc,GAGdC,EAAY,UACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,oBACD,OAAO,YAAC,EAAD,KAAeJ,EAAiBI,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,wBACE,kDACA,sEACA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,eACb,WAAc,OACd,MAAQ,IAHP,gsD,mkBAuEXJ,EAAWK,gBAAiB,E,wCCpF5B,IAKMP,EAAc,GAGdC,EAAY,UACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,oBACD,OAAO,YAAC,EAAD,KAAeJ,EAAiBI,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,6BACA,wDACA,kCACA,sBACE,kBAAIC,WAAW,MACb,iBAAGA,WAAW,MAAd,oDAEF,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,wBAGJ,+BACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,sEAML,kCACA,0BACF,0BACE,YAAC,EAAD,CAAOD,QAAQ,UACf,YAAC,EAAD,CAASA,QAAQ,YACjB,YAAC,EAAD,CAAWA,QAAQ,eAErB,0BACE,YAAC,EAAD,CAAOA,QAAQ,UACf,YAAC,EAAD,CAAYA,QAAQ,iBAGpB,8BAKJH,EAAWK,gBAAiB","file":"32.bundle.5f0745cdc826ed9b8a60.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <demo>\n      <h3>{`Basic`}</h3>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-jsx\",\n          \"metastring\": \"live\",\n          \"live\": true\n        }}>{`() => {\n  const log = (e) => {\n    console.log(e);\n  }\n  \n  const preventDefault = (e) => {\n    e.preventDefault();\n    console.log('Clicked! But prevent default.');\n  }\n  \n  return (\n    <>\n      <Tag>Tag 1</Tag>\n      <Tag>\n        <a href=\"https://github.com\">Link</a>\n      </Tag>\n      <Tag closable onClose={log}>\n        Tag 2\n      </Tag>\n      <Tag closable onClose={preventDefault}>\n        Prevent Default\n      </Tag>\n    </>\n  );\n}\n`}</code></pre>\n    </demo>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <demo>\n      <h3>{`Checkable`}</h3>\n      <p><inlineCode parentName=\"p\">{`CheckableTag`}</inlineCode>{` works like Checkbox, click it to toggle checked state. `}</p>\n      <blockquote>\n        <p parentName=\"blockquote\">{`It obviously also has controlled & uncontrolled mode.`}</p>\n      </blockquote>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-jsx\",\n          \"metastring\": \"live\",\n          \"live\": true\n        }}>{`() => {\n  const { CheckableTag } = Tag;\n  \n  const onChange = (checked) => {\n    console.log(checked)\n  };\n  \n  return (\n    <>\n      <CheckableTag defaultChecked={true} onChange={onChange}>Tag1</CheckableTag>\n      <CheckableTag defaultChecked={false} onChange={onChange}>Tag2</CheckableTag>\n      <CheckableTag defaultChecked={false} onChange={onChange}>Tag3</CheckableTag>\n    </>\n  );\n}\n`}</code></pre>\n    </demo>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <demo>\n      <h3>{`Colorful Tag`}</h3>\n      <p>{`We preset a series of colorful tag styles for use in different situations. You can also set it to a hex color string for custom color.`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-jsx\",\n          \"metastring\": \"live\",\n          \"live\": true\n        }}>{`<>\n  <h4 style={{ marginBottom: 16 }}>Presets:</h4>\n  <div>\n    <Tag color=\"magenta\">magenta</Tag>\n    <Tag color=\"red\">red</Tag>\n    <Tag color=\"volcano\">volcano</Tag>\n    <Tag color=\"orange\">orange</Tag>\n    <Tag color=\"gold\">gold</Tag>\n    <Tag color=\"lime\">lime</Tag>\n    <Tag color=\"green\">green</Tag>\n    <Tag color=\"cyan\">cyan</Tag>\n    <Tag color=\"blue\">blue</Tag>\n    <Tag color=\"geekblue\">geekblue</Tag>\n    <Tag color=\"purple\">purple</Tag>\n  </div>\n  \n  <h4 style={{ margin: '16px 0' }}>Custom:</h4>\n  <div>\n    <Tag color=\"#f50\">#f50</Tag>\n    <Tag color=\"#2db7f5\">#2db7f5</Tag>\n    <Tag color=\"#87d068\">#87d068</Tag>\n    <Tag color=\"#108ee9\">#108ee9</Tag>\n  </div>\n</>\n`}</code></pre>\n    </demo>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <demo>\n      <h3>{`Controlled`}</h3>\n      <p>{`By using the `}<inlineCode parentName=\"p\">{`visible`}</inlineCode>{` prop, you can control the close state of Tag.`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-jsx\",\n          \"metastring\": \"live\",\n          \"live\": true\n        }}>{`() => {\n  const ControlledTag = () => {\n    const [visible, setVisible] = React.useState(true);\n  \n    return (\n      <>\n        <Tag\n          closable\n          visible={visible}\n          onClose={() => setVisible(false)}>\n          Movies\n        </Tag>\n        <br />\n        <br />\n        <Button color=\"primary\" size=\"sm\" onClick={() => setVisible(!visible)}>\n          Toggle\n        </Button>\n      </>\n    );\n  };\n  \n  return <ControlledTag />;\n}\n`}</code></pre>\n    </demo>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <demo>\n      <h3>{`Add & Remove Dynamically`}</h3>\n      <p>{`Adding or removing a set of tags dynamically.`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-jsx\",\n          \"metastring\": \"live\",\n          \"live\": true\n        }}>{`() => {\n  const { useState, useRef } = React;\n  \n  const EditableTagGroup = () => {\n    const [tags, setTags] = useState(['Unremovable', 'Tag 2', 'Tag 3']);\n    const [inputVisible, setInputVisible] = useState(false);\n    const [inputValue, setInputValue] = useState('');\n    const inputRef = useRef(null);\n    \n    const showInput = () => {\n      setInputVisible(true);\n    };\n    \n    const handleInputChange = (val) => {\n      setInputValue(val);\n    };\n    \n    const handleInputConfirm = () => {\n      const tagValues = [...tags];\n      if (inputValue && tags.indexOf(inputValue) === -1) {\n        tagValues.push(inputValue);\n      }\n      setTags(tagValues);\n      setInputVisible(false);\n      setInputValue('');\n    };\n    \n    const handleClose = (removedTag) => {\n      const tagValues = [...tags]; \n      const filtered = tagValues.filter(tag => tag !== removedTag);\n      setTags(filtered);\n    };\n      \n    return (\n      <div>\n        {tags.map((tag, idx) => (\n          <Tag key={tag} closable={idx !== 0} onClose={() => handleClose(tag)}>{tag}</Tag>\n        ))}\n        {inputVisible ? (\n          <Input\n            autoFocus\n            size=\"sm\"\n            style={{ width: 78, display: 'inline-block' }}\n            value={inputValue}\n            onChange={handleInputChange}\n            onBlur={handleInputConfirm}\n            onEnterPress={handleInputConfirm}\n          />\n        )\n        : \n        (\n          <Tag onClick={showInput} style={{ background: '#fff', borderStyle: 'dashed' }}>\n            <Icon type=\"plus\" size={11}/> New Tag\n          </Tag>\n        )}\n      </div>\n    );\n  };\n  \n  return <EditableTagGroup />;\n}\n`}</code></pre>\n    </demo>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport Basic from './demo/basic.md'\nimport Checkable from './demo/checkable.md'\nimport Color from './demo/color.md'\nimport Controlled from './demo/controlled.md'\nimport Dynamic from './demo/dynamic.md'\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1>{`Tag`}</h1>\n    <p>{`Tag for categorizing or markup.`}</p>\n    <h2>{`Scenario`}</h2>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`It can be used to tag by dimension or property.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`When categorizing.`}</p>\n      </li>\n    </ul>\n    <h2>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { Tag } from 'tiny-ui';\n\nconst { CheckableTag } = Tag;\n`}</code></pre>\n    <h2>{`Examples`}</h2>\n    <layout>\n  <column>\n    <Basic mdxType=\"Basic\" />\n    <Dynamic mdxType=\"Dynamic\" />\n    <Checkable mdxType=\"Checkable\" />\n  </column>\n  <column>\n    <Color mdxType=\"Color\" />\n    <Controlled mdxType=\"Controlled\" />\n  </column>\n    </layout>\n    <h2>{`API`}</h2>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}