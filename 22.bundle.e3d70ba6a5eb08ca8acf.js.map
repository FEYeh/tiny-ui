{"version":3,"sources":["webpack:///./components/modal/demo/animation.md","webpack:///./components/modal/demo/basic.md","webpack:///./components/modal/demo/customised-footer.md","webpack:///./components/modal/demo/position.md","webpack:///./components/modal/index.md"],"names":["layoutProps","MDXLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"srBAOA,IAKMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,oBACD,OAAO,YAACH,EAAD,KAAeD,EAAiBI,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,wBACE,mCACA,4BAAW,0BAAYC,WAAW,KAAvB,aAAX,sCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,eACb,WAAc,OACd,MAAQ,IAHP,0lC,mkBAgDXJ,EAAWK,gBAAiB,ECjE5B,IAKMP,EAAc,GAGdC,EAAY,UACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,oBACD,OAAO,YAAC,EAAD,KAAeJ,EAAiBI,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,wBACE,+BACA,qCAIA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,eACb,WAAc,OACd,MAAQ,IAHP,siB,mkBAgCXJ,EAAWK,gBAAiB,ECpD5B,IAKMP,EAAc,GAGdC,EAAY,UACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,oBACD,OAAO,YAAC,EAAD,KAAeJ,EAAiBI,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,wBACE,2CACA,kOACA,0BAAYC,WAAW,KAAvB,iBADA,8CAKA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,eACb,WAAc,OACd,MAAQ,IAHP,43B,mkBA4CXJ,EAAWK,gBAAiB,ECjE5B,IAKMP,EAAc,GAGdC,EAAY,UACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,oBACD,OAAO,YAAC,EAAD,KAAeJ,EAAiBI,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,wBACE,4DACA,4BAAW,0BAAYC,WAAW,KAAvB,YAAX,OAAuE,0BAAYA,WAAW,KAAvB,OAAvE,qDACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,eACb,WAAc,OACd,MAAQ,IAHP,4nC,mkBAiDXJ,EAAWK,gBAAiB,E,wCC/D5B,IAKMP,EAAc,GAGdC,EAAY,UACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,oBACD,OAAO,YAAC,EAAD,KAAeJ,EAAiBI,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,+BACA,uCACA,kCACA,mKAAkJ,sBAAQC,WAAW,KAAnB,SAAlJ,uGACA,+BACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,uCAIL,kCACA,0BACF,0BACE,YAAC,EAAD,CAAOD,QAAQ,UACf,YAAC,EAAD,CAAkBA,QAAQ,sBAE5B,0BACE,YAAC,EAAD,CAAUA,QAAQ,aAClB,YAAC,EAAD,CAAWA,QAAQ,gBAGnB,8BAKJH,EAAWK,gBAAiB","file":"22.bundle.e3d70ba6a5eb08ca8acf.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <demo>\n      <h3>{`Animation`}</h3>\n      <p>{`Use `}<inlineCode parentName=\"p\">{`animation`}</inlineCode>{` to set different popup animation.`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-jsx\",\n          \"metastring\": \"live\",\n          \"live\": true\n        }}>{`() => {\n  const Wrapper = () => {\n    const [visible1, setVisible1] = React.useState(false);\n    const [visible2, setVisible2] = React.useState(false);\n  \n    return (\n      <>\n        <Button color=\"primary\" onClick={() => setVisible1(true)}>\n          Default Slide up and down\n        </Button>\n        <Button color=\"primary\" onClick={() => setVisible2(true)}>\n          Scale animation\n        </Button>\n        <Modal\n          header=\"Default Slide up and down\"\n          visible={visible1}\n          onOk={() => {}}\n          onCancel={() => setVisible1(false)}>\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n        </Modal>\n        <Modal\n          animation=\"scale\"\n          header=\"I'm a scale animation modal\"\n          visible={visible2}\n          onOk={() => {}}\n          onCancel={() => setVisible2(false)}>\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n        </Modal>      \n      </>\n    );\n  };\n  \n  return <Wrapper />;\n}\n`}</code></pre>\n    </demo>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <demo>\n      <h3>{`Basic`}</h3>\n      <p>{`Basic modal.`}</p>\n      {\n        /*start-code*/\n      }\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-jsx\",\n          \"metastring\": \"live\",\n          \"live\": true\n        }}>{`() => {\n  const Wrapper = () => {\n    const [visible, setVisible] = React.useState(false);\n  \n    return (\n      <>\n        <Button color=\"primary\" onClick={() => setVisible(true)}>Open Modal</Button>\n        <Modal\n          header=\"Basic Modal\"\n          visible={visible}\n          onOk={() => {}}\n          onCancel={() => setVisible(false)}>\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n        </Modal>\n      </>\n    );\n  };\n  \n  return <Wrapper />;\n}\n`}</code></pre>\n    </demo>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <demo>\n      <h3>{`Customized Footer`}</h3>\n      <p>{`A more complex example which define a customized footer button bar, the dialog will change to loading state after clicking submit button, when the loading is over, the modal dialog will be closed.\nSet `}<inlineCode parentName=\"p\">{`footer={null}`}</inlineCode>{` if you don't need default footer buttons.`}</p>\n      {\n        /*start-code*/\n      }\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-jsx\",\n          \"metastring\": \"live\",\n          \"live\": true\n        }}>{`() => {\n  const Wrapper = () => {\n    const [visible, setVisible] = React.useState(false);\n    const [loading, setLoading] = React.useState(false);\n  \n    const _handleConfirm = () => {\n      setLoading(true);\n      setTimeout(() => {\n        setLoading(false);\n        setVisible(false);\n      }, 3000);\n    };\n  \n    return (\n      <>\n        <Button color=\"primary\" onClick={() => setVisible(true)}>Open Modal</Button>\n        <Modal\n          header=\"Custom Footer\"\n          visible={visible}\n          onConfirm={_handleConfirm}\n          onCancel={() => setVisible(false)}\n          confirmText=\"Submit\"\n          cancelText=\"Reture\"\n          confirmLoading={loading}>\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n        </Modal>\n      </>\n    );\n  };\n  \n  return <Wrapper />;\n}\n`}</code></pre>\n    </demo>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <demo>\n      <h3>{`To customize the position of modal`}</h3>\n      <p>{`Use `}<inlineCode parentName=\"p\">{`centered`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`top`}</inlineCode>{` or other styles to set position of modal dialog.`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-jsx\",\n          \"metastring\": \"live\",\n          \"live\": true\n        }}>{`() => {\n  const Wrapper = () => {\n    const [visible1, setVisible1] = React.useState(false);\n    const [visible2, setVisible2] = React.useState(false);\n  \n    return (\n      <>\n        <Button color=\"primary\" onClick={() => setVisible1(true)}>\n          Display a modal dialog at 20px to the top\n        </Button>\n        <Button color=\"primary\" onClick={() => setVisible2(true)}>\n          Vertically centered modal dialog\n        </Button>\n        <Modal\n          top={20}\n          header=\"20px to Top\"\n          visible={visible1}\n          onOk={() => {}}\n          onCancel={() => setVisible1(false)}>\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n        </Modal>\n        <Modal\n          centered\n          header=\"Vertically centered modal dialog\"\n          visible={visible2}\n          onOk={() => {}}\n          onCancel={() => setVisible2(false)}>\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n        </Modal>      \n      </>\n    );\n  };\n  \n  return <Wrapper />;\n}\n`}</code></pre>\n    </demo>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport Animation from './demo/animation.md'\nimport Basic from './demo/basic.md'\nimport CustomisedFooter from './demo/customised-footer.md'\nimport Position from './demo/position.md'\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1>{`Modal`}</h1>\n    <p>{`Modal dialogs.`}</p>\n    <h2>{`Scenario`}</h2>\n    <p>{`When requiring users to interact with the application, but without jumping to a new page and interrupting the user's workflow, you can use `}<strong parentName=\"p\">{`Modal`}</strong>{` to create a new floating layer over the current page to get user feedback or display information. `}</p>\n    <h2>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import { Modal } from 'tiny-ui';\n`}</code></pre>\n    <h2>{`Examples`}</h2>\n    <layout>\n  <column>\n    <Basic mdxType=\"Basic\" />\n    <CustomisedFooter mdxType=\"CustomisedFooter\" />\n  </column>\n  <column>\n    <Position mdxType=\"Position\" />\n    <Animation mdxType=\"Animation\" />\n  </column>\n    </layout>\n    <h2>{`API`}</h2>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}