(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{680:function(e,n,t){"use strict";t.r(n);t(0);var o=t(57);function r(){return(r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function l(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},l=Object.keys(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var a={},i="wrapper";function s(e){var n=e.components,t=l(e,["components"]);return Object(o.b)(i,r({},a,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("demo",null,Object(o.b)("h3",null,"Animation"),Object(o.b)("p",null,"Use ",Object(o.b)("inlineCode",{parentName:"p"},"animation")," to set different popup animation."),Object(o.b)("pre",null,Object(o.b)("code",r({parentName:"pre"},{className:"language-jsx",metastring:"live",live:!0}),'() => {\n  const Wrapper = () => {\n    const [visible1, setVisible1] = React.useState(false);\n    const [visible2, setVisible2] = React.useState(false);\n  \n    return (\n      <>\n        <Button color="primary" onClick={() => setVisible1(true)}>\n          Default Slide up and down\n        </Button>\n        <Button color="primary" onClick={() => setVisible2(true)}>\n          Scale animation\n        </Button>\n        <Modal\n          header="Default Slide up and down"\n          visible={visible1}\n          onOk={() => {}}\n          onCancel={() => setVisible1(false)}>\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n        </Modal>\n        <Modal\n          animation="scale"\n          header="I\'m a scale animation modal"\n          visible={visible2}\n          onOk={() => {}}\n          onCancel={() => setVisible2(false)}>\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n        </Modal>      \n      </>\n    );\n  };\n  \n  return <Wrapper />;\n}\n'))))}function c(){return(c=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function p(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},l=Object.keys(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}s.isMDXComponent=!0;var u={},b="wrapper";function m(e){var n=e.components,t=p(e,["components"]);return Object(o.b)(b,c({},u,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("demo",null,Object(o.b)("h3",null,"Basic"),Object(o.b)("p",null,"Basic modal."),Object(o.b)("pre",null,Object(o.b)("code",c({parentName:"pre"},{className:"language-jsx",metastring:"live",live:!0}),'() => {\n  const Wrapper = () => {\n    const [visible, setVisible] = React.useState(false);\n  \n    return (\n      <>\n        <Button color="primary" onClick={() => setVisible(true)}>Open Modal</Button>\n        <Modal\n          header="Basic Modal"\n          visible={visible}\n          onOk={() => {}}\n          onCancel={() => setVisible(false)}>\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n        </Modal>\n      </>\n    );\n  };\n  \n  return <Wrapper />;\n}\n'))))}function f(){return(f=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function d(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},l=Object.keys(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}m.isMDXComponent=!0;var O={},j="wrapper";function y(e){var n=e.components,t=d(e,["components"]);return Object(o.b)(j,f({},O,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("demo",null,Object(o.b)("h3",null,"Customized Footer"),Object(o.b)("p",null,"A more complex example which define a customized footer button bar, the dialog will change to loading state after clicking submit button, when the loading is over, the modal dialog will be closed.\nSet ",Object(o.b)("inlineCode",{parentName:"p"},"footer={null}")," if you don't need default footer buttons."),Object(o.b)("pre",null,Object(o.b)("code",f({parentName:"pre"},{className:"language-jsx",metastring:"live",live:!0}),'() => {\n  const Wrapper = () => {\n    const [visible, setVisible] = React.useState(false);\n    const [loading, setLoading] = React.useState(false);\n  \n    const _handleConfirm = () => {\n      setLoading(true);\n      setTimeout(() => {\n        setLoading(false);\n        setVisible(false);\n      }, 3000);\n    };\n  \n    return (\n      <>\n        <Button color="primary" onClick={() => setVisible(true)}>Open Modal</Button>\n        <Modal\n          header="Custom Footer"\n          visible={visible}\n          onConfirm={_handleConfirm}\n          onCancel={() => setVisible(false)}\n          confirmText="Submit"\n          cancelText="Reture"\n          confirmLoading={loading}>\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n        </Modal>\n      </>\n    );\n  };\n  \n  return <Wrapper />;\n}\n'))))}function g(){return(g=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function v(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},l=Object.keys(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}y.isMDXComponent=!0;var h={},S="wrapper";function w(e){var n=e.components,t=v(e,["components"]);return Object(o.b)(S,g({},h,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("demo",null,Object(o.b)("h3",null,"To customize the position of modal"),Object(o.b)("p",null,"Use ",Object(o.b)("inlineCode",{parentName:"p"},"centered")," or ",Object(o.b)("inlineCode",{parentName:"p"},"top")," or other styles to set position of modal dialog."),Object(o.b)("pre",null,Object(o.b)("code",g({parentName:"pre"},{className:"language-jsx",metastring:"live",live:!0}),'() => {\n  const Wrapper = () => {\n    const [visible1, setVisible1] = React.useState(false);\n    const [visible2, setVisible2] = React.useState(false);\n  \n    return (\n      <>\n        <Button color="primary" onClick={() => setVisible1(true)}>\n          Display a modal dialog at 20px to the top\n        </Button>\n        <Button color="primary" onClick={() => setVisible2(true)}>\n          Vertically centered modal dialog\n        </Button>\n        <Modal\n          top={20}\n          header="20px to Top"\n          visible={visible1}\n          onOk={() => {}}\n          onCancel={() => setVisible1(false)}>\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n        </Modal>\n        <Modal\n          centered\n          header="Vertically centered modal dialog"\n          visible={visible2}\n          onOk={() => {}}\n          onCancel={() => setVisible2(false)}>\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n        </Modal>      \n      </>\n    );\n  };\n  \n  return <Wrapper />;\n}\n'))))}function x(){return(x=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function M(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},l=Object.keys(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}w.isMDXComponent=!0,t.d(n,"default",(function(){return V}));var C={},k="wrapper";function V(e){var n=e.components,t=M(e,["components"]);return Object(o.b)(k,x({},C,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("h1",null,"Modal"),Object(o.b)("p",null,"Modal dialogs."),Object(o.b)("h2",null,"Scenario"),Object(o.b)("p",null,"When requiring users to interact with the application, but without jumping to a new page and interrupting the user's workflow, you can use ",Object(o.b)("strong",{parentName:"p"},"Modal")," to create a new floating layer over the current page to get user feedback or display information. "),Object(o.b)("h2",null,"Usage"),Object(o.b)("pre",null,Object(o.b)("code",x({parentName:"pre"},{className:"language-jsx"}),"import { Modal } from 'tiny-ui';\n")),Object(o.b)("h2",null,"Examples"),Object(o.b)("layout",null,Object(o.b)("column",null,Object(o.b)(m,{mdxType:"Basic"}),Object(o.b)(y,{mdxType:"CustomisedFooter"})),Object(o.b)("column",null,Object(o.b)(w,{mdxType:"Position"}),Object(o.b)(s,{mdxType:"Animation"}))),Object(o.b)("h2",null,"API"))}V.isMDXComponent=!0}}]);
//# sourceMappingURL=21.bundle.ac97b44be227dfe82abe.js.map