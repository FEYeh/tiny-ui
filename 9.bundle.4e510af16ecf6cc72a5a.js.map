{"version":3,"sources":["webpack:///./components/button/demo/block.md","webpack:///./components/button/demo/color.md","webpack:///./components/button/demo/disabled.md","webpack:///./components/button/demo/group.md","webpack:///./components/button/demo/icon.md","webpack:///./components/button/demo/loading.md","webpack:///./components/button/demo/size.md","webpack:///./components/button/demo/type.md","webpack:///./components/button/index.md"],"names":["layoutProps","MDXLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"9.bundle.4e510af16ecf6cc72a5a.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <demo>\n      <h3>{`Block Button`}</h3>\n      <p>{`block property will make the button fit to its parent width.`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-jsx\",\n          \"metastring\": \"live\",\n          \"live\": true\n        }}>{`() => {\n\n  const marginBottomStyle = {\n    marginBottom: 12,\n  };\n\n  return (\n    <>\n      <Button block style={marginBottomStyle}>Default Button</Button>\n      <Button block color=\"primary\" style={marginBottomStyle}>Primary Button</Button>\n      <Button block link style={marginBottomStyle}>Link</Button>\n    </>\n  );\n};\n`}</code></pre>\n    </demo>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <demo>\n      <h3>{`Color Indication`}</h3>\n      <p>{`Different colors represent different meanings.`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-jsx\",\n          \"metastring\": \"live\",\n          \"live\": true\n        }}>{`<>\n  <Button color=\"green\">Success</Button>\n  <Button color=\"blue\">Info</Button>\n  <Button color=\"yellow\">Warning</Button>\n  <Button color=\"red\">Danger</Button>\n</>\n`}</code></pre>\n    </demo>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <demo>\n      <h3>{`Disabled`}</h3>\n      <p>{`Add the `}<inlineCode parentName=\"p\">{`disabled`}</inlineCode>{` property to disable the Button.`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-jsx\",\n          \"metastring\": \"live\",\n          \"live\": true\n        }}>{`<>\n  <Button disabled>Default Button</Button>\n  <Button disabled color=\"primary\">Primary Button</Button>\n  <Button disabled color=\"green\">Success</Button>\n  <Button disabled color=\"blue\">Info</Button>\n  <Button disabled color=\"yellow\">Warning</Button>\n  <Button disabled color=\"red\">Danger</Button>\n  <Button disabled link>Link</Button>\n</>\n`}</code></pre>\n    </demo>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <demo>\n      <h3>{`Button Group`}</h3>\n      <p>{`Buttons can be grouped by placing multiple `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` components into a Button.Group.`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-jsx\",\n          \"metastring\": \"live\",\n          \"live\": true\n        }}>{`() => {\n  const { Group } = Button;\n\n  return (\n    <>\n      <div>\n        <h4>Basic</h4>\n        <Group>\n          <Button>Go Left</Button>\n          <Button>Go Right</Button>\n        </Group>\n        <br/>\n        <Group color=\"primary\">\n          <Button>Normal Button</Button>\n          <Button>Middle</Button>\n          <Button>Normal Button</Button>\n        </Group>\n      </div>\n\n      <div>\n        <h4>Group props</h4>\n        <Group size=\"lg\">\n          <Button>Go Left</Button>\n          <Button>Go Right</Button>\n        </Group>\n        <br/>\n        <Group color=\"primary\" round>\n          <Button disabled>Normal Button</Button>\n          <Button>Middle</Button>\n          <Button>Normal Button</Button>\n        </Group>\n        <br/>\n        <Group color=\"green\" disabled>\n          <Button>Left</Button>\n          <Button>Middle</Button>\n          <Button>Right</Button>\n        </Group>\n      </div>\n    </>\n  );\n}\n`}</code></pre>\n    </demo>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <demo>\n      <h3>{`Icon Button`}</h3>\n      <p>{`Use icons to add more meaning to Button. You can use icon alone to save some space, or with text together.`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-jsx\",\n          \"metastring\": \"live\",\n          \"live\": true\n        }}>{`<>\n  <Button icon={<Icon type=\"wifi\"/>} color=\"primary\"/>\n  <Button icon={<Icon type=\"gift\"/>} color=\"primary\"/>\n  <Button icon={<Icon type=\"search\"/>} color=\"primary\">Search</Button>\n  <Button color=\"primary\">Upload <Icon type=\"Upload1\"/></Button>\n</>\n`}</code></pre>\n    </demo>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <demo>\n      <h3>{`Loading Button`}</h3>\n      <p>{`Click the button to load data, then the button displays a loading state.`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-jsx\",\n          \"metastring\": \"live\",\n          \"live\": true\n        }}>{`<>\n  <Button loading>Default Button</Button>\n  <Button loading color=\"primary\">Primary Button</Button>\n  <Button loading link>Link</Button>\n</>\n`}</code></pre>\n    </demo>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <demo>\n      <h3>{`Size`}</h3>\n      <p>{`There are three different sizes, `}<inlineCode parentName=\"p\">{`lg`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`md`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`sm`}</inlineCode>{`. The default size is `}<inlineCode parentName=\"p\">{`md`}</inlineCode>{`.`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-jsx\",\n          \"metastring\": \"live\",\n          \"live\": true\n        }}>{`  <>\n    <Button color=\"primary\" size=\"lg\">Large Size</Button>\n    <Button color=\"primary\">Default Size</Button>\n    <Button color=\"primary\" size=\"sm\">Small Size</Button>\n  </>\n`}</code></pre>\n    </demo>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <demo>\n      <h3>{`Type`}</h3>\n      <p>{`There are `}<inlineCode parentName=\"p\">{`primary`}</inlineCode>{` button, `}<inlineCode parentName=\"p\">{`default`}</inlineCode>{` button, and `}<inlineCode parentName=\"p\">{`link`}</inlineCode>{` button.`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-jsx\",\n          \"metastring\": \"live\",\n          \"live\": true\n        }}>{`<>\n  <Button>Default Button</Button>\n  <Button color=\"primary\">Primary Button</Button>\n  <Button link>Link</Button>\n</>\n`}</code></pre>\n    </demo>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport Block from './demo/block.md'\nimport Color from './demo/color.md'\nimport Disabled from './demo/disabled.md'\nimport ButtonGroup from './demo/group.md'\nimport Icon from './demo/icon.md'\nimport Loading from './demo/loading.md'\nimport Size from './demo/size.md'\nimport Type from './demo/type.md'\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1>{`Button`}</h1>\n    <p>{`To trigger an operation.`}</p>\n    <h2>{`Scenario`}</h2>\n    <p>{`A button means an operation (or a series of operations). Clicking a button will trigger corresponding business logic.`}</p>\n    <h2>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import { Button } from 'tiny-ui';\n\nconst { Group } = Button;\n`}</code></pre>\n    <h2>{`Examples`}</h2>\n    <layout>\n  <column>\n    <Type mdxType=\"Type\" />\n    <Color mdxType=\"Color\" />\n    <Size mdxType=\"Size\" />\n    <ButtonGroup mdxType=\"ButtonGroup\" />\n  </column>\n  <column>\n    <Loading mdxType=\"Loading\" />\n    <Icon mdxType=\"Icon\" />\n    <Disabled mdxType=\"Disabled\" />\n    <Block mdxType=\"Block\" />\n  </column>\n    </layout>\n    <h2>{`API`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Default`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`size`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`selection size`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`enum: `}<inlineCode parentName=\"td\">{`sm`}</inlineCode>{` `}{`|`}{` `}<inlineCode parentName=\"td\">{`md`}</inlineCode>{` `}{`|`}{` `}<inlineCode parentName=\"td\">{`lg`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`md`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`disabled`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`disable to select`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`style`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`style object of container\tobject`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`CSSProperties`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`className`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`className of container`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}