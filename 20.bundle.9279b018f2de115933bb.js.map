{"version":3,"sources":["webpack:///./components/notification/demo/basic.md","webpack:///./components/notification/demo/duration.md","webpack:///./components/notification/demo/icon.md","webpack:///./components/notification/demo/placement.md","webpack:///./components/notification/demo/type.md","webpack:///./components/notification/index.md"],"names":["layoutProps","MDXLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"srBAOA,IAKMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,oBACD,OAAO,YAACH,EAAD,KAAeD,EAAiBI,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,wBACE,+BACA,uFACA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,eACb,WAAc,OACd,MAAQ,IAHP,wZ,mkBAuBXJ,EAAWK,gBAAiB,ECxC5B,IAKMP,EAAc,GAGdC,EAAY,UACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,oBACD,OAAO,YAAC,EAAD,KAAeJ,EAAiBI,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,wBACE,gDACA,mCAAkB,0BAAYC,WAAW,KAAvB,YAAlB,iEACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,eACb,WAAc,OACd,MAAQ,IAHP,uV,mkBAuBXJ,EAAWK,gBAAiB,ECxC5B,IAKMP,EAAc,GAGdC,EAAY,UACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,oBACD,OAAO,YAAC,EAAD,KAAeJ,EAAiBI,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,wBACE,yCACA,sEACA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,eACb,WAAc,OACd,MAAQ,IAHP,ub,mkBAuBXJ,EAAWK,gBAAiB,ECxC5B,IAKMP,EAAc,GAGdC,EAAY,UACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,oBACD,OAAO,YAAC,EAAD,KAAeJ,EAAiBI,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,wBACE,mCACA,+DAA8C,0BAAYC,WAAW,KAAvB,YAA9C,KAAwG,0BAAYA,WAAW,KAAvB,eAAxG,KAAqK,0BAAYA,WAAW,KAAvB,cAArK,OAAmO,0BAAYA,WAAW,KAAvB,WAAnO,qBACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,eACb,WAAc,OACd,MAAQ,IAHP,4pB,mkBA4BXJ,EAAWK,gBAAiB,EC7C5B,IAKMP,EAAc,GAGdC,EAAY,UACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,oBACD,OAAO,YAAC,EAAD,KAAeJ,EAAiBI,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,wBACE,yDACA,yEACA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,eACb,WAAc,OACd,MAAQ,IAHP,+qB,mkBA8BXJ,EAAWK,gBAAiB,E,wCC3C5B,IAKMP,EAAc,GAGdC,EAAY,UACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,oBACD,OAAO,YAAC,EAAD,KAAeJ,EAAiBI,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,sCACA,wDACA,kCACA,uJACA,sBACE,kBAAIC,WAAW,MACb,iBAAGA,WAAW,MAAd,yCAEF,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,qJAEF,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,uDAGJ,+BACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,8CAIL,kCACA,0BACF,0BACE,YAAC,EAAD,CAAOD,QAAQ,UACf,YAAC,EAAD,CAAUA,QAAQ,aAClB,YAAC,EAAD,CAAMA,QAAQ,UAEhB,0BACE,YAAC,EAAD,CAAWA,QAAQ,cACnB,YAAC,EAAD,CAAMA,QAAQ,WAGd,8BAKJH,EAAWK,gBAAiB","file":"20.bundle.9279b018f2de115933bb.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <demo>\n      <h3>{`Basic`}</h3>\n      <p>{`The simplest usage that close the notification box after 4.5s.`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-jsx\",\n          \"metastring\": \"live\",\n          \"live\": true\n        }}>{`() => {\n  const btnOnClick = () => {\n    Notification.open({\n      title: 'Notification Title',\n      description: 'This is the content of the notification. This is the content of the notification.',\n      onClick: () => {\n        console.log('Notification Clicked!');\n      },\n    });\n  };\n  \n  return <Button color=\"primary\" onClick={btnOnClick}>Open the notification box</Button>;\n}\n`}</code></pre>\n    </demo>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <demo>\n      <h3>{`Control the close time`}</h3>\n      <p>{`If set the `}<inlineCode parentName=\"p\">{`duration`}</inlineCode>{` value to 0, the notification will never close automatically.`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-jsx\",\n          \"metastring\": \"live\",\n          \"live\": true\n        }}>{`() => {\n  const btnOnClick = () => {\n    Notification.open({\n      title: 'Notification Title',\n      description: 'This notification only can be closed by clicking the close button',\n      duration: 0,\n    });\n  };\n  \n  return (\n    <Button color=\"primary\" onClick={btnOnClick}>Open the notification box</Button>\n  );\n}\n`}</code></pre>\n    </demo>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <demo>\n      <h3>{`Customized Icon`}</h3>\n      <p>{`The icon can be customized to any react node.`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-jsx\",\n          \"metastring\": \"live\",\n          \"live\": true\n        }}>{`() => {\n  const btnOnClick = () => {\n    Notification.open({\n      title: 'Notification Title',\n      description: 'This is the content of the notification. This is the content of the notification.',\n      icon: <Icon type=\"broadcast\" size={25} color=\"#1890ff\" style={{marginRight: 15}}/>\n    });\n  };\n  \n  return (\n    <Button color=\"primary\" onClick={btnOnClick}>Notification with customised icon</Button>\n  );\n}\n`}</code></pre>\n    </demo>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <demo>\n      <h3>{`Placement`}</h3>\n      <p>{`A notification box can appear from the `}<inlineCode parentName=\"p\">{`topRight`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`bottomRight`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`bottomLeft`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`topLeft`}</inlineCode>{` of the viewport.`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-jsx\",\n          \"metastring\": \"live\",\n          \"live\": true\n        }}>{`() => {\n  const btnOnClick = (placement) => {\n    Notification.open({\n      title: 'Notification Title',\n      description: 'This is the content of the notification. This is the content of the notification.',\n      placement,\n    });\n  };\n  \n  return (\n    <>\n      <Button color=\"primary\" onClick={() => btnOnClick('topLeft')}>Top Left</Button>\n      <Button color=\"primary\" onClick={() => btnOnClick('topRight')}>Top Right</Button>\n      <Button color=\"primary\" onClick={() => btnOnClick('bottomLeft')}>Bottom Left</Button>\n      <Button color=\"primary\" onClick={() => btnOnClick('bottomRight')}>Bottom Right</Button>\n    </>\n  );\n}\n`}</code></pre>\n    </demo>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <demo>\n      <h3>{`Different types of notification`}</h3>\n      <p>{`A notification box with a icon at the left side.`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-jsx\",\n          \"metastring\": \"live\",\n          \"live\": true\n        }}>{`() => {\n  const btnOnClick = (type) => {\n    Notification[type]({\n      title: 'Notification Title',\n      description: 'This is the content of the notification. This is the content of the notification.',\n      onClick: () => {\n        console.log('Notification Clicked!');\n      },\n    });\n  };\n  \n  return (\n    <>\n      <Button color=\"blue\" onClick={() => btnOnClick('info')}>Info</Button>\n      <Button color=\"green\" onClick={() => btnOnClick('success')}>Success</Button>\n      <Button color=\"yellow\" onClick={() => btnOnClick('warning')}>Warning</Button>\n      <Button color=\"red\" onClick={() => btnOnClick('error')}>Error</Button>\n    </>\n  );\n}\n`}</code></pre>\n    </demo>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport Basic from './demo/basic.md'\nimport Duration from './demo/duration.md'\nimport Icon from './demo/icon.md'\nimport Placement from './demo/placement.md'\nimport Type from './demo/type.md'\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1>{`Notification`}</h1>\n    <p>{`Display a notification message.`}</p>\n    <h2>{`Scenario`}</h2>\n    <p>{`To display a notification message at any of the four corners of the viewport. Typically it can be used in the following cases:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`A notification with complex content.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`A notification providing a feedback based on the user interaction. Or it may show some details about upcoming steps the user may have to follow.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`A notification that is pushed by the application.`}</p>\n      </li>\n    </ul>\n    <h2>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { Notification } from 'tiny-ui';\n`}</code></pre>\n    <h2>{`Examples`}</h2>\n    <layout>\n  <column>\n    <Basic mdxType=\"Basic\" />\n    <Duration mdxType=\"Duration\" />\n    <Icon mdxType=\"Icon\" />\n  </column>\n  <column>\n    <Placement mdxType=\"Placement\" />\n    <Type mdxType=\"Type\" />\n  </column>\n    </layout>\n    <h2>{`API`}</h2>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}